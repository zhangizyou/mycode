    将点云转成深度图，只需要确定一个直角坐标系，角分辨率，a范围，phi范围即可。毕竟这只是一个直角坐标转球坐标的工作而已。

　　这样做显然是有好处的，首先，这是一种除了八叉树，kd_tree之外，能够将点云的空间关系表达出来的手段。每个点云都有了横，纵，深，三个坐标，并且这种坐标原点的设定方式，在理论上是不会存在干涉的（从原点出发的一条线理论上不会遇到多余1个点）。于是点云的空间关系就自然的被编码与深度图中。

　　显然，图像中的关键点检测算子就可以被移植到点云特征点求取中来了。


PCL的点云 ---> 深度图转换

//rangeImage也是PCL的基本数据结构
pcl::RangeImage rangeImage;

//角分辨率
float angularResolution = (float) (  1.0f * (M_PI/180.0f));  //   1.0 degree in radians

//phi可以取360°
  float maxAngleWidth     = (float) (360.0f * (M_PI/180.0f));  // 360.0 degree in radians

//a取180°
  float maxAngleHeight    = (float) (180.0f * (M_PI/180.0f));  // 180.0 degree in radians

//半圆扫一圈就是整个图像了

//传感器朝向
  Eigen::Affine3f sensorPose = (Eigen::Affine3f)Eigen::Translation3f(0.0f, 0.0f, 0.0f);

//除了三维相机模式还可以选结构光模式
  pcl::RangeImage::CoordinateFrame coordinate_frame = pcl::RangeImage::CAMERA_FRAME;

//noise level表示的是容差率，因为1°X1°的空间内很可能不止一个点，noise level = 0则表示去最近点的距离作为像素值，如果=0.05则表示在最近点及其后5cm范围内求个平均距离
  float noiseLevel=0.00;

//minRange表示深度最小值，如果=0则表示取1°X1°的空间内最远点，近的都忽略
  float minRange = 0.0f;

//bordersieze表示图像周边点  
  int borderSize = 1;

//基本数据结构直接打印是ok的
  std::cout << rangeImage << "\n";